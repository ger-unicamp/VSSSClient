// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: replacement.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "replacement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace fira_message {
namespace sim_to_ref {

namespace {

const ::google::protobuf::Descriptor* RobotReplacement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotReplacement_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallReplacement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallReplacement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Replacement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Replacement_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_replacement_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_replacement_2eproto() {
  protobuf_AddDesc_replacement_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "replacement.proto");
  GOOGLE_CHECK(file != NULL);
  RobotReplacement_descriptor_ = file->message_type(0);
  static const int RobotReplacement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotReplacement, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotReplacement, yellowteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotReplacement, turnon_),
  };
  RobotReplacement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RobotReplacement_descriptor_,
      RobotReplacement::default_instance_,
      RobotReplacement_offsets_,
      -1,
      -1,
      -1,
      sizeof(RobotReplacement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotReplacement, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotReplacement, _is_default_instance_));
  BallReplacement_descriptor_ = file->message_type(1);
  static const int BallReplacement_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallReplacement, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallReplacement, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallReplacement, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallReplacement, vy_),
  };
  BallReplacement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BallReplacement_descriptor_,
      BallReplacement::default_instance_,
      BallReplacement_offsets_,
      -1,
      -1,
      -1,
      sizeof(BallReplacement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallReplacement, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallReplacement, _is_default_instance_));
  Replacement_descriptor_ = file->message_type(2);
  static const int Replacement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replacement, ball_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replacement, robots_),
  };
  Replacement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Replacement_descriptor_,
      Replacement::default_instance_,
      Replacement_offsets_,
      -1,
      -1,
      -1,
      sizeof(Replacement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replacement, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replacement, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_replacement_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RobotReplacement_descriptor_, &RobotReplacement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BallReplacement_descriptor_, &BallReplacement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Replacement_descriptor_, &Replacement::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_replacement_2eproto() {
  delete RobotReplacement::default_instance_;
  delete RobotReplacement_reflection_;
  delete BallReplacement::default_instance_;
  delete BallReplacement_reflection_;
  delete Replacement::default_instance_;
  delete Replacement_reflection_;
}

void protobuf_AddDesc_replacement_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_replacement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::fira_message::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021replacement.proto\022\027fira_message.sim_to"
    "_ref\032\014common.proto\"]\n\020RobotReplacement\022%"
    "\n\010position\030\001 \001(\0132\023.fira_message.Robot\022\022\n"
    "\nyellowteam\030\005 \001(\010\022\016\n\006turnon\030\006 \001(\010\"\?\n\017Bal"
    "lReplacement\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\n\n\002vx"
    "\030\003 \001(\001\022\n\n\002vy\030\004 \001(\001\"\200\001\n\013Replacement\0226\n\004ba"
    "ll\030\001 \001(\0132(.fira_message.sim_to_ref.BallR"
    "eplacement\0229\n\006robots\030\002 \003(\0132).fira_messag"
    "e.sim_to_ref.RobotReplacementb\006proto3", 357);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "replacement.proto", &protobuf_RegisterTypes);
  RobotReplacement::default_instance_ = new RobotReplacement();
  BallReplacement::default_instance_ = new BallReplacement();
  Replacement::default_instance_ = new Replacement();
  RobotReplacement::default_instance_->InitAsDefaultInstance();
  BallReplacement::default_instance_->InitAsDefaultInstance();
  Replacement::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_replacement_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_replacement_2eproto {
  StaticDescriptorInitializer_replacement_2eproto() {
    protobuf_AddDesc_replacement_2eproto();
  }
} static_descriptor_initializer_replacement_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotReplacement::kPositionFieldNumber;
const int RobotReplacement::kYellowteamFieldNumber;
const int RobotReplacement::kTurnonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotReplacement::RobotReplacement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fira_message.sim_to_ref.RobotReplacement)
}

void RobotReplacement::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_ = const_cast< ::fira_message::Robot*>(&::fira_message::Robot::default_instance());
}

RobotReplacement::RobotReplacement(const RobotReplacement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fira_message.sim_to_ref.RobotReplacement)
}

void RobotReplacement::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  position_ = NULL;
  yellowteam_ = false;
  turnon_ = false;
}

RobotReplacement::~RobotReplacement() {
  // @@protoc_insertion_point(destructor:fira_message.sim_to_ref.RobotReplacement)
  SharedDtor();
}

void RobotReplacement::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void RobotReplacement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotReplacement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotReplacement_descriptor_;
}

const RobotReplacement& RobotReplacement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_replacement_2eproto();
  return *default_instance_;
}

RobotReplacement* RobotReplacement::default_instance_ = NULL;

RobotReplacement* RobotReplacement::New(::google::protobuf::Arena* arena) const {
  RobotReplacement* n = new RobotReplacement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RobotReplacement::Clear() {
// @@protoc_insertion_point(message_clear_start:fira_message.sim_to_ref.RobotReplacement)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RobotReplacement, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RobotReplacement*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(yellowteam_, turnon_);
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool RobotReplacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fira_message.sim_to_ref.RobotReplacement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fira_message.Robot position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_yellowteam;
        break;
      }

      // optional bool yellowteam = 5;
      case 5: {
        if (tag == 40) {
         parse_yellowteam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yellowteam_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_turnon;
        break;
      }

      // optional bool turnon = 6;
      case 6: {
        if (tag == 48) {
         parse_turnon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &turnon_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fira_message.sim_to_ref.RobotReplacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fira_message.sim_to_ref.RobotReplacement)
  return false;
#undef DO_
}

void RobotReplacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fira_message.sim_to_ref.RobotReplacement)
  // optional .fira_message.Robot position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // optional bool yellowteam = 5;
  if (this->yellowteam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->yellowteam(), output);
  }

  // optional bool turnon = 6;
  if (this->turnon() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->turnon(), output);
  }

  // @@protoc_insertion_point(serialize_end:fira_message.sim_to_ref.RobotReplacement)
}

::google::protobuf::uint8* RobotReplacement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fira_message.sim_to_ref.RobotReplacement)
  // optional .fira_message.Robot position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, false, target);
  }

  // optional bool yellowteam = 5;
  if (this->yellowteam() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->yellowteam(), target);
  }

  // optional bool turnon = 6;
  if (this->turnon() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->turnon(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fira_message.sim_to_ref.RobotReplacement)
  return target;
}

int RobotReplacement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fira_message.sim_to_ref.RobotReplacement)
  int total_size = 0;

  // optional .fira_message.Robot position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // optional bool yellowteam = 5;
  if (this->yellowteam() != 0) {
    total_size += 1 + 1;
  }

  // optional bool turnon = 6;
  if (this->turnon() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotReplacement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fira_message.sim_to_ref.RobotReplacement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RobotReplacement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotReplacement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fira_message.sim_to_ref.RobotReplacement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fira_message.sim_to_ref.RobotReplacement)
    MergeFrom(*source);
  }
}

void RobotReplacement::MergeFrom(const RobotReplacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fira_message.sim_to_ref.RobotReplacement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_position()) {
    mutable_position()->::fira_message::Robot::MergeFrom(from.position());
  }
  if (from.yellowteam() != 0) {
    set_yellowteam(from.yellowteam());
  }
  if (from.turnon() != 0) {
    set_turnon(from.turnon());
  }
}

void RobotReplacement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fira_message.sim_to_ref.RobotReplacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotReplacement::CopyFrom(const RobotReplacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fira_message.sim_to_ref.RobotReplacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotReplacement::IsInitialized() const {

  return true;
}

void RobotReplacement::Swap(RobotReplacement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotReplacement::InternalSwap(RobotReplacement* other) {
  std::swap(position_, other->position_);
  std::swap(yellowteam_, other->yellowteam_);
  std::swap(turnon_, other->turnon_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RobotReplacement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotReplacement_descriptor_;
  metadata.reflection = RobotReplacement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RobotReplacement

// optional .fira_message.Robot position = 1;
bool RobotReplacement::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void RobotReplacement::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::fira_message::Robot& RobotReplacement::position() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.RobotReplacement.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::fira_message::Robot* RobotReplacement::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::fira_message::Robot;
  }
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.RobotReplacement.position)
  return position_;
}
::fira_message::Robot* RobotReplacement::release_position() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.RobotReplacement.position)
  
  ::fira_message::Robot* temp = position_;
  position_ = NULL;
  return temp;
}
void RobotReplacement::set_allocated_position(::fira_message::Robot* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.RobotReplacement.position)
}

// optional bool yellowteam = 5;
void RobotReplacement::clear_yellowteam() {
  yellowteam_ = false;
}
 bool RobotReplacement::yellowteam() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.RobotReplacement.yellowteam)
  return yellowteam_;
}
 void RobotReplacement::set_yellowteam(bool value) {
  
  yellowteam_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.RobotReplacement.yellowteam)
}

// optional bool turnon = 6;
void RobotReplacement::clear_turnon() {
  turnon_ = false;
}
 bool RobotReplacement::turnon() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.RobotReplacement.turnon)
  return turnon_;
}
 void RobotReplacement::set_turnon(bool value) {
  
  turnon_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.RobotReplacement.turnon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BallReplacement::kXFieldNumber;
const int BallReplacement::kYFieldNumber;
const int BallReplacement::kVxFieldNumber;
const int BallReplacement::kVyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BallReplacement::BallReplacement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fira_message.sim_to_ref.BallReplacement)
}

void BallReplacement::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BallReplacement::BallReplacement(const BallReplacement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fira_message.sim_to_ref.BallReplacement)
}

void BallReplacement::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  vx_ = 0;
  vy_ = 0;
}

BallReplacement::~BallReplacement() {
  // @@protoc_insertion_point(destructor:fira_message.sim_to_ref.BallReplacement)
  SharedDtor();
}

void BallReplacement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BallReplacement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallReplacement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallReplacement_descriptor_;
}

const BallReplacement& BallReplacement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_replacement_2eproto();
  return *default_instance_;
}

BallReplacement* BallReplacement::default_instance_ = NULL;

BallReplacement* BallReplacement::New(::google::protobuf::Arena* arena) const {
  BallReplacement* n = new BallReplacement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BallReplacement::Clear() {
// @@protoc_insertion_point(message_clear_start:fira_message.sim_to_ref.BallReplacement)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BallReplacement, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BallReplacement*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, vy_);

#undef ZR_HELPER_
#undef ZR_

}

bool BallReplacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fira_message.sim_to_ref.BallReplacement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_vx;
        break;
      }

      // optional double vx = 3;
      case 3: {
        if (tag == 25) {
         parse_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vx_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_vy;
        break;
      }

      // optional double vy = 4;
      case 4: {
        if (tag == 33) {
         parse_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vy_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fira_message.sim_to_ref.BallReplacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fira_message.sim_to_ref.BallReplacement)
  return false;
#undef DO_
}

void BallReplacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fira_message.sim_to_ref.BallReplacement)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double vx = 3;
  if (this->vx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->vx(), output);
  }

  // optional double vy = 4;
  if (this->vy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->vy(), output);
  }

  // @@protoc_insertion_point(serialize_end:fira_message.sim_to_ref.BallReplacement)
}

::google::protobuf::uint8* BallReplacement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fira_message.sim_to_ref.BallReplacement)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double vx = 3;
  if (this->vx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->vx(), target);
  }

  // optional double vy = 4;
  if (this->vy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->vy(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fira_message.sim_to_ref.BallReplacement)
  return target;
}

int BallReplacement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fira_message.sim_to_ref.BallReplacement)
  int total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double vx = 3;
  if (this->vx() != 0) {
    total_size += 1 + 8;
  }

  // optional double vy = 4;
  if (this->vy() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallReplacement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fira_message.sim_to_ref.BallReplacement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BallReplacement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BallReplacement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fira_message.sim_to_ref.BallReplacement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fira_message.sim_to_ref.BallReplacement)
    MergeFrom(*source);
  }
}

void BallReplacement::MergeFrom(const BallReplacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fira_message.sim_to_ref.BallReplacement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.vx() != 0) {
    set_vx(from.vx());
  }
  if (from.vy() != 0) {
    set_vy(from.vy());
  }
}

void BallReplacement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fira_message.sim_to_ref.BallReplacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallReplacement::CopyFrom(const BallReplacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fira_message.sim_to_ref.BallReplacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallReplacement::IsInitialized() const {

  return true;
}

void BallReplacement::Swap(BallReplacement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BallReplacement::InternalSwap(BallReplacement* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(vx_, other->vx_);
  std::swap(vy_, other->vy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BallReplacement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallReplacement_descriptor_;
  metadata.reflection = BallReplacement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BallReplacement

// optional double x = 1;
void BallReplacement::clear_x() {
  x_ = 0;
}
 double BallReplacement::x() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.BallReplacement.x)
  return x_;
}
 void BallReplacement::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.BallReplacement.x)
}

// optional double y = 2;
void BallReplacement::clear_y() {
  y_ = 0;
}
 double BallReplacement::y() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.BallReplacement.y)
  return y_;
}
 void BallReplacement::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.BallReplacement.y)
}

// optional double vx = 3;
void BallReplacement::clear_vx() {
  vx_ = 0;
}
 double BallReplacement::vx() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.BallReplacement.vx)
  return vx_;
}
 void BallReplacement::set_vx(double value) {
  
  vx_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.BallReplacement.vx)
}

// optional double vy = 4;
void BallReplacement::clear_vy() {
  vy_ = 0;
}
 double BallReplacement::vy() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.BallReplacement.vy)
  return vy_;
}
 void BallReplacement::set_vy(double value) {
  
  vy_ = value;
  // @@protoc_insertion_point(field_set:fira_message.sim_to_ref.BallReplacement.vy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Replacement::kBallFieldNumber;
const int Replacement::kRobotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Replacement::Replacement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:fira_message.sim_to_ref.Replacement)
}

void Replacement::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ball_ = const_cast< ::fira_message::sim_to_ref::BallReplacement*>(&::fira_message::sim_to_ref::BallReplacement::default_instance());
}

Replacement::Replacement(const Replacement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:fira_message.sim_to_ref.Replacement)
}

void Replacement::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ball_ = NULL;
}

Replacement::~Replacement() {
  // @@protoc_insertion_point(destructor:fira_message.sim_to_ref.Replacement)
  SharedDtor();
}

void Replacement::SharedDtor() {
  if (this != default_instance_) {
    delete ball_;
  }
}

void Replacement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Replacement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Replacement_descriptor_;
}

const Replacement& Replacement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_replacement_2eproto();
  return *default_instance_;
}

Replacement* Replacement::default_instance_ = NULL;

Replacement* Replacement::New(::google::protobuf::Arena* arena) const {
  Replacement* n = new Replacement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Replacement::Clear() {
// @@protoc_insertion_point(message_clear_start:fira_message.sim_to_ref.Replacement)
  if (GetArenaNoVirtual() == NULL && ball_ != NULL) delete ball_;
  ball_ = NULL;
  robots_.Clear();
}

bool Replacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fira_message.sim_to_ref.Replacement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .fira_message.sim_to_ref.BallReplacement ball = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_robots;
        break;
      }

      // repeated .fira_message.sim_to_ref.RobotReplacement robots = 2;
      case 2: {
        if (tag == 18) {
         parse_robots:
          DO_(input->IncrementRecursionDepth());
         parse_loop_robots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_robots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_robots;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fira_message.sim_to_ref.Replacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fira_message.sim_to_ref.Replacement)
  return false;
#undef DO_
}

void Replacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fira_message.sim_to_ref.Replacement)
  // optional .fira_message.sim_to_ref.BallReplacement ball = 1;
  if (this->has_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ball_, output);
  }

  // repeated .fira_message.sim_to_ref.RobotReplacement robots = 2;
  for (unsigned int i = 0, n = this->robots_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->robots(i), output);
  }

  // @@protoc_insertion_point(serialize_end:fira_message.sim_to_ref.Replacement)
}

::google::protobuf::uint8* Replacement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:fira_message.sim_to_ref.Replacement)
  // optional .fira_message.sim_to_ref.BallReplacement ball = 1;
  if (this->has_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->ball_, false, target);
  }

  // repeated .fira_message.sim_to_ref.RobotReplacement robots = 2;
  for (unsigned int i = 0, n = this->robots_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->robots(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:fira_message.sim_to_ref.Replacement)
  return target;
}

int Replacement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:fira_message.sim_to_ref.Replacement)
  int total_size = 0;

  // optional .fira_message.sim_to_ref.BallReplacement ball = 1;
  if (this->has_ball()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ball_);
  }

  // repeated .fira_message.sim_to_ref.RobotReplacement robots = 2;
  total_size += 1 * this->robots_size();
  for (int i = 0; i < this->robots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robots(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Replacement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fira_message.sim_to_ref.Replacement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Replacement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Replacement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fira_message.sim_to_ref.Replacement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fira_message.sim_to_ref.Replacement)
    MergeFrom(*source);
  }
}

void Replacement::MergeFrom(const Replacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fira_message.sim_to_ref.Replacement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  robots_.MergeFrom(from.robots_);
  if (from.has_ball()) {
    mutable_ball()->::fira_message::sim_to_ref::BallReplacement::MergeFrom(from.ball());
  }
}

void Replacement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fira_message.sim_to_ref.Replacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Replacement::CopyFrom(const Replacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fira_message.sim_to_ref.Replacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Replacement::IsInitialized() const {

  return true;
}

void Replacement::Swap(Replacement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Replacement::InternalSwap(Replacement* other) {
  std::swap(ball_, other->ball_);
  robots_.UnsafeArenaSwap(&other->robots_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Replacement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Replacement_descriptor_;
  metadata.reflection = Replacement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Replacement

// optional .fira_message.sim_to_ref.BallReplacement ball = 1;
bool Replacement::has_ball() const {
  return !_is_default_instance_ && ball_ != NULL;
}
void Replacement::clear_ball() {
  if (GetArenaNoVirtual() == NULL && ball_ != NULL) delete ball_;
  ball_ = NULL;
}
const ::fira_message::sim_to_ref::BallReplacement& Replacement::ball() const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Replacement.ball)
  return ball_ != NULL ? *ball_ : *default_instance_->ball_;
}
::fira_message::sim_to_ref::BallReplacement* Replacement::mutable_ball() {
  
  if (ball_ == NULL) {
    ball_ = new ::fira_message::sim_to_ref::BallReplacement;
  }
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Replacement.ball)
  return ball_;
}
::fira_message::sim_to_ref::BallReplacement* Replacement::release_ball() {
  // @@protoc_insertion_point(field_release:fira_message.sim_to_ref.Replacement.ball)
  
  ::fira_message::sim_to_ref::BallReplacement* temp = ball_;
  ball_ = NULL;
  return temp;
}
void Replacement::set_allocated_ball(::fira_message::sim_to_ref::BallReplacement* ball) {
  delete ball_;
  ball_ = ball;
  if (ball) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:fira_message.sim_to_ref.Replacement.ball)
}

// repeated .fira_message.sim_to_ref.RobotReplacement robots = 2;
int Replacement::robots_size() const {
  return robots_.size();
}
void Replacement::clear_robots() {
  robots_.Clear();
}
const ::fira_message::sim_to_ref::RobotReplacement& Replacement::robots(int index) const {
  // @@protoc_insertion_point(field_get:fira_message.sim_to_ref.Replacement.robots)
  return robots_.Get(index);
}
::fira_message::sim_to_ref::RobotReplacement* Replacement::mutable_robots(int index) {
  // @@protoc_insertion_point(field_mutable:fira_message.sim_to_ref.Replacement.robots)
  return robots_.Mutable(index);
}
::fira_message::sim_to_ref::RobotReplacement* Replacement::add_robots() {
  // @@protoc_insertion_point(field_add:fira_message.sim_to_ref.Replacement.robots)
  return robots_.Add();
}
::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::RobotReplacement >*
Replacement::mutable_robots() {
  // @@protoc_insertion_point(field_mutable_list:fira_message.sim_to_ref.Replacement.robots)
  return &robots_;
}
const ::google::protobuf::RepeatedPtrField< ::fira_message::sim_to_ref::RobotReplacement >&
Replacement::robots() const {
  // @@protoc_insertion_point(field_list:fira_message.sim_to_ref.Replacement.robots)
  return robots_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_to_ref
}  // namespace fira_message

// @@protoc_insertion_point(global_scope)
