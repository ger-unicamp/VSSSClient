// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vssref_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vssref_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace VSSRef {

namespace {

const ::google::protobuf::Descriptor* Robot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Robot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Frame_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Foul_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Color_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Quadrant_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Half_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_vssref_5fcommon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_vssref_5fcommon_2eproto() {
  protobuf_AddDesc_vssref_5fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vssref_common.proto");
  GOOGLE_CHECK(file != NULL);
  Robot_descriptor_ = file->message_type(0);
  static const int Robot_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, robot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, orientation_),
  };
  Robot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Robot_descriptor_,
      Robot::default_instance_,
      Robot_offsets_,
      -1,
      -1,
      -1,
      sizeof(Robot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, _is_default_instance_));
  Frame_descriptor_ = file->message_type(1);
  static const int Frame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, teamcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, robots_),
  };
  Frame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Frame_descriptor_,
      Frame::default_instance_,
      Frame_offsets_,
      -1,
      -1,
      -1,
      sizeof(Frame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _is_default_instance_));
  Foul_descriptor_ = file->enum_type(0);
  Color_descriptor_ = file->enum_type(1);
  Quadrant_descriptor_ = file->enum_type(2);
  Half_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vssref_5fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Robot_descriptor_, &Robot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Frame_descriptor_, &Frame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vssref_5fcommon_2eproto() {
  delete Robot::default_instance_;
  delete Robot_reflection_;
  delete Frame::default_instance_;
  delete Frame_reflection_;
}

void protobuf_AddDesc_vssref_5fcommon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_vssref_5fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023vssref_common.proto\022\006VSSRef\"D\n\005Robot\022\020"
    "\n\010robot_id\030\001 \001(\r\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\022\023"
    "\n\013orientation\030\004 \001(\001\"H\n\005Frame\022 \n\tteamColo"
    "r\030\001 \001(\0162\r.VSSRef.Color\022\035\n\006robots\030\002 \003(\0132\r"
    ".VSSRef.Robot*i\n\004Foul\022\r\n\tFREE_KICK\020\000\022\020\n\014"
    "PENALTY_KICK\020\001\022\r\n\tGOAL_KICK\020\002\022\r\n\tFREE_BA"
    "LL\020\003\022\013\n\007KICKOFF\020\004\022\010\n\004STOP\020\005\022\013\n\007GAME_ON\020\006"
    "*\'\n\005Color\022\010\n\004BLUE\020\000\022\n\n\006YELLOW\020\001\022\010\n\004NONE\020"
    "\002*[\n\010Quadrant\022\017\n\013NO_QUADRANT\020\000\022\016\n\nQUADRA"
    "NT_1\020\001\022\016\n\nQUADRANT_2\020\002\022\016\n\nQUADRANT_3\020\003\022\016"
    "\n\nQUADRANT_4\020\004*4\n\004Half\022\013\n\007NO_HALF\020\000\022\016\n\nF"
    "IRST_HALF\020\001\022\017\n\013SECOND_HALF\020\002b\006proto3", 476);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vssref_common.proto", &protobuf_RegisterTypes);
  Robot::default_instance_ = new Robot();
  Frame::default_instance_ = new Frame();
  Robot::default_instance_->InitAsDefaultInstance();
  Frame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vssref_5fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vssref_5fcommon_2eproto {
  StaticDescriptorInitializer_vssref_5fcommon_2eproto() {
    protobuf_AddDesc_vssref_5fcommon_2eproto();
  }
} static_descriptor_initializer_vssref_5fcommon_2eproto_;
const ::google::protobuf::EnumDescriptor* Foul_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Foul_descriptor_;
}
bool Foul_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Color_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Color_descriptor_;
}
bool Color_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Quadrant_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quadrant_descriptor_;
}
bool Quadrant_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Half_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Half_descriptor_;
}
bool Half_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Robot::kRobotIdFieldNumber;
const int Robot::kXFieldNumber;
const int Robot::kYFieldNumber;
const int Robot::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Robot::Robot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VSSRef.Robot)
}

void Robot::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Robot::Robot(const Robot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VSSRef.Robot)
}

void Robot::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  robot_id_ = 0u;
  x_ = 0;
  y_ = 0;
  orientation_ = 0;
}

Robot::~Robot() {
  // @@protoc_insertion_point(destructor:VSSRef.Robot)
  SharedDtor();
}

void Robot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Robot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Robot_descriptor_;
}

const Robot& Robot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vssref_5fcommon_2eproto();
  return *default_instance_;
}

Robot* Robot::default_instance_ = NULL;

Robot* Robot::New(::google::protobuf::Arena* arena) const {
  Robot* n = new Robot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:VSSRef.Robot)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Robot, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Robot*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, robot_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool Robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VSSRef.Robot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 robot_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_x;
        break;
      }

      // optional double x = 2;
      case 2: {
        if (tag == 17) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_y;
        break;
      }

      // optional double y = 3;
      case 3: {
        if (tag == 25) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_orientation;
        break;
      }

      // optional double orientation = 4;
      case 4: {
        if (tag == 33) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orientation_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VSSRef.Robot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VSSRef.Robot)
  return false;
#undef DO_
}

void Robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VSSRef.Robot)
  // optional uint32 robot_id = 1;
  if (this->robot_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->robot_id(), output);
  }

  // optional double x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }

  // optional double y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }

  // optional double orientation = 4;
  if (this->orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->orientation(), output);
  }

  // @@protoc_insertion_point(serialize_end:VSSRef.Robot)
}

::google::protobuf::uint8* Robot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VSSRef.Robot)
  // optional uint32 robot_id = 1;
  if (this->robot_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->robot_id(), target);
  }

  // optional double x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }

  // optional double y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }

  // optional double orientation = 4;
  if (this->orientation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->orientation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:VSSRef.Robot)
  return target;
}

int Robot::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:VSSRef.Robot)
  int total_size = 0;

  // optional uint32 robot_id = 1;
  if (this->robot_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->robot_id());
  }

  // optional double x = 2;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 3;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double orientation = 4;
  if (this->orientation() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VSSRef.Robot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Robot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Robot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VSSRef.Robot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VSSRef.Robot)
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VSSRef.Robot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.robot_id() != 0) {
    set_robot_id(from.robot_id());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.orientation() != 0) {
    set_orientation(from.orientation());
  }
}

void Robot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VSSRef.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VSSRef.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {

  return true;
}

void Robot::Swap(Robot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Robot::InternalSwap(Robot* other) {
  std::swap(robot_id_, other->robot_id_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(orientation_, other->orientation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Robot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Robot_descriptor_;
  metadata.reflection = Robot_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Robot

// optional uint32 robot_id = 1;
void Robot::clear_robot_id() {
  robot_id_ = 0u;
}
 ::google::protobuf::uint32 Robot::robot_id() const {
  // @@protoc_insertion_point(field_get:VSSRef.Robot.robot_id)
  return robot_id_;
}
 void Robot::set_robot_id(::google::protobuf::uint32 value) {
  
  robot_id_ = value;
  // @@protoc_insertion_point(field_set:VSSRef.Robot.robot_id)
}

// optional double x = 2;
void Robot::clear_x() {
  x_ = 0;
}
 double Robot::x() const {
  // @@protoc_insertion_point(field_get:VSSRef.Robot.x)
  return x_;
}
 void Robot::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:VSSRef.Robot.x)
}

// optional double y = 3;
void Robot::clear_y() {
  y_ = 0;
}
 double Robot::y() const {
  // @@protoc_insertion_point(field_get:VSSRef.Robot.y)
  return y_;
}
 void Robot::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:VSSRef.Robot.y)
}

// optional double orientation = 4;
void Robot::clear_orientation() {
  orientation_ = 0;
}
 double Robot::orientation() const {
  // @@protoc_insertion_point(field_get:VSSRef.Robot.orientation)
  return orientation_;
}
 void Robot::set_orientation(double value) {
  
  orientation_ = value;
  // @@protoc_insertion_point(field_set:VSSRef.Robot.orientation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame::kTeamColorFieldNumber;
const int Frame::kRobotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame::Frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VSSRef.Frame)
}

void Frame::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Frame::Frame(const Frame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VSSRef.Frame)
}

void Frame::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  teamcolor_ = 0;
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:VSSRef.Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Frame_descriptor_;
}

const Frame& Frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vssref_5fcommon_2eproto();
  return *default_instance_;
}

Frame* Frame::default_instance_ = NULL;

Frame* Frame::New(::google::protobuf::Arena* arena) const {
  Frame* n = new Frame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:VSSRef.Frame)
  teamcolor_ = 0;
  robots_.Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VSSRef.Frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .VSSRef.Color teamColor = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_teamcolor(static_cast< ::VSSRef::Color >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_robots;
        break;
      }

      // repeated .VSSRef.Robot robots = 2;
      case 2: {
        if (tag == 18) {
         parse_robots:
          DO_(input->IncrementRecursionDepth());
         parse_loop_robots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_robots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_robots;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VSSRef.Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VSSRef.Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VSSRef.Frame)
  // optional .VSSRef.Color teamColor = 1;
  if (this->teamcolor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->teamcolor(), output);
  }

  // repeated .VSSRef.Robot robots = 2;
  for (unsigned int i = 0, n = this->robots_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->robots(i), output);
  }

  // @@protoc_insertion_point(serialize_end:VSSRef.Frame)
}

::google::protobuf::uint8* Frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VSSRef.Frame)
  // optional .VSSRef.Color teamColor = 1;
  if (this->teamcolor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->teamcolor(), target);
  }

  // repeated .VSSRef.Robot robots = 2;
  for (unsigned int i = 0, n = this->robots_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->robots(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:VSSRef.Frame)
  return target;
}

int Frame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:VSSRef.Frame)
  int total_size = 0;

  // optional .VSSRef.Color teamColor = 1;
  if (this->teamcolor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->teamcolor());
  }

  // repeated .VSSRef.Robot robots = 2;
  total_size += 1 * this->robots_size();
  for (int i = 0; i < this->robots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robots(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VSSRef.Frame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Frame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VSSRef.Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VSSRef.Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VSSRef.Frame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  robots_.MergeFrom(from.robots_);
  if (from.teamcolor() != 0) {
    set_teamcolor(from.teamcolor());
  }
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VSSRef.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VSSRef.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {

  return true;
}

void Frame::Swap(Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame::InternalSwap(Frame* other) {
  std::swap(teamcolor_, other->teamcolor_);
  robots_.UnsafeArenaSwap(&other->robots_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Frame_descriptor_;
  metadata.reflection = Frame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Frame

// optional .VSSRef.Color teamColor = 1;
void Frame::clear_teamcolor() {
  teamcolor_ = 0;
}
 ::VSSRef::Color Frame::teamcolor() const {
  // @@protoc_insertion_point(field_get:VSSRef.Frame.teamColor)
  return static_cast< ::VSSRef::Color >(teamcolor_);
}
 void Frame::set_teamcolor(::VSSRef::Color value) {
  
  teamcolor_ = value;
  // @@protoc_insertion_point(field_set:VSSRef.Frame.teamColor)
}

// repeated .VSSRef.Robot robots = 2;
int Frame::robots_size() const {
  return robots_.size();
}
void Frame::clear_robots() {
  robots_.Clear();
}
const ::VSSRef::Robot& Frame::robots(int index) const {
  // @@protoc_insertion_point(field_get:VSSRef.Frame.robots)
  return robots_.Get(index);
}
::VSSRef::Robot* Frame::mutable_robots(int index) {
  // @@protoc_insertion_point(field_mutable:VSSRef.Frame.robots)
  return robots_.Mutable(index);
}
::VSSRef::Robot* Frame::add_robots() {
  // @@protoc_insertion_point(field_add:VSSRef.Frame.robots)
  return robots_.Add();
}
::google::protobuf::RepeatedPtrField< ::VSSRef::Robot >*
Frame::mutable_robots() {
  // @@protoc_insertion_point(field_mutable_list:VSSRef.Frame.robots)
  return &robots_;
}
const ::google::protobuf::RepeatedPtrField< ::VSSRef::Robot >&
Frame::robots() const {
  // @@protoc_insertion_point(field_list:VSSRef.Frame.robots)
  return robots_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace VSSRef

// @@protoc_insertion_point(global_scope)
