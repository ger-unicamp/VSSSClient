// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vssref_placement.proto

#ifndef PROTOBUF_vssref_5fplacement_2eproto__INCLUDED
#define PROTOBUF_vssref_5fplacement_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "vssref_common.pb.h"
// @@protoc_insertion_point(includes)

namespace VSSRef {
namespace team_to_ref {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_vssref_5fplacement_2eproto();
void protobuf_AssignDesc_vssref_5fplacement_2eproto();
void protobuf_ShutdownFile_vssref_5fplacement_2eproto();

class VSSRef_Placement;

// ===================================================================

class VSSRef_Placement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:VSSRef.team_to_ref.VSSRef_Placement) */ {
 public:
  VSSRef_Placement();
  virtual ~VSSRef_Placement();

  VSSRef_Placement(const VSSRef_Placement& from);

  inline VSSRef_Placement& operator=(const VSSRef_Placement& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VSSRef_Placement& default_instance();

  void Swap(VSSRef_Placement* other);

  // implements Message ----------------------------------------------

  inline VSSRef_Placement* New() const { return New(NULL); }

  VSSRef_Placement* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VSSRef_Placement& from);
  void MergeFrom(const VSSRef_Placement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VSSRef_Placement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .VSSRef.Frame world = 1;
  bool has_world() const;
  void clear_world();
  static const int kWorldFieldNumber = 1;
  const ::VSSRef::Frame& world() const;
  ::VSSRef::Frame* mutable_world();
  ::VSSRef::Frame* release_world();
  void set_allocated_world(::VSSRef::Frame* world);

  // @@protoc_insertion_point(class_scope:VSSRef.team_to_ref.VSSRef_Placement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::VSSRef::Frame* world_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_vssref_5fplacement_2eproto();
  friend void protobuf_AssignDesc_vssref_5fplacement_2eproto();
  friend void protobuf_ShutdownFile_vssref_5fplacement_2eproto();

  void InitAsDefaultInstance();
  static VSSRef_Placement* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// VSSRef_Placement

// optional .VSSRef.Frame world = 1;
inline bool VSSRef_Placement::has_world() const {
  return !_is_default_instance_ && world_ != NULL;
}
inline void VSSRef_Placement::clear_world() {
  if (GetArenaNoVirtual() == NULL && world_ != NULL) delete world_;
  world_ = NULL;
}
inline const ::VSSRef::Frame& VSSRef_Placement::world() const {
  // @@protoc_insertion_point(field_get:VSSRef.team_to_ref.VSSRef_Placement.world)
  return world_ != NULL ? *world_ : *default_instance_->world_;
}
inline ::VSSRef::Frame* VSSRef_Placement::mutable_world() {
  
  if (world_ == NULL) {
    world_ = new ::VSSRef::Frame;
  }
  // @@protoc_insertion_point(field_mutable:VSSRef.team_to_ref.VSSRef_Placement.world)
  return world_;
}
inline ::VSSRef::Frame* VSSRef_Placement::release_world() {
  // @@protoc_insertion_point(field_release:VSSRef.team_to_ref.VSSRef_Placement.world)
  
  ::VSSRef::Frame* temp = world_;
  world_ = NULL;
  return temp;
}
inline void VSSRef_Placement::set_allocated_world(::VSSRef::Frame* world) {
  delete world_;
  world_ = world;
  if (world) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:VSSRef.team_to_ref.VSSRef_Placement.world)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace team_to_ref
}  // namespace VSSRef

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vssref_5fplacement_2eproto__INCLUDED
